import pandas as pd
import numpy as np
import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV
from sklearn.preprocessing import StandardScaler, MinMaxScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.metrics import (
    mean_squared_error, 
    mean_absolute_error, 
    r2_score, 
    classification_report, 
    confusion_matrix
)

# מודלים מתקדמים יותר
from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier
from sklearn.svm import SVR, SVC
from sklearn.neural_network import MLPRegressor, MLPClassifier
from xgboost import XGBRegressor, XGBClassifier

class AdvancedMLAnalyzer:
    def __init__(self, master):
        self.master = master
        master.title("כלי למידת מכונה מתקדם")
        master.geometry("1200x800")

        # אחסון נתונים ומודלים
        self.original_data = None
        self.processed_data = None
        self.ml_models = {
            'רגרסיה': {
                'Random Forest': RandomForestRegressor(),
                'Support Vector Regression': SVR(),
                'Neural Network': MLPRegressor(),
                'XGBoost': XGBRegressor()
            },
            'סיווג': {
                'Random Forest': RandomForestClassifier(),
                'Support Vector Classifier': SVC(),
                'Neural Network': MLPClassifier(),
                'XGBoost': XGBClassifier()
            }
        }

        # הגדרת מאפיינים לחיפוש היפר-פרמטרים
        self.hyperparameters = {
            'Random Forest': {
                'n_estimators': [50, 100, 200],
                'max_depth': [None, 10, 20]
            },
            'Support Vector': {
                'C': [0.1, 1, 10],
                'kernel': ['linear', 'rbf']
            },
            'Neural Network': {
                'hidden_layer_sizes': [(50,), (100,), (50,50)],
                'activation': ['relu', 'tanh']
            }
        }

        # יצירת ממשק משתמש
        self._create_ui()

    def _create_ui(self):
        # טאב טעינת נתונים
        data_frame = tk.Frame(self.master)
        data_frame.pack(pady=10)

        load_btn = tk.Button(data_frame, text="טעון נתונים", command=self._load_data)
        load_btn.pack()

        # טאב הכנת נתונים
        prep_frame = tk.LabelFrame(self.master, text="הכנת נתונים")
        prep_frame.pack(pady=10, padx=10, fill='x')

        # בחירת טיפול בנתונים
        self.numeric_columns = tk.Listbox(prep_frame, selectmode=tk.MULTIPLE)
        self.numeric_columns.pack(side=tk.LEFT, padx=10)

        self.categorical_columns = tk.Listbox(prep_frame, selectmode=tk.MULTIPLE)
        self.categorical_columns.pack(side=tk.LEFT, padx=10)

        preprocess_btn = tk.Button(prep_frame, text="עבד נתונים", command=self._preprocess_data)
        preprocess_btn.pack(side=tk.LEFT, padx=10)

        # טאב בחירת מודל
        model_frame = tk.LabelFrame(self.master, text="בחירת מודל")
        model_frame.pack(pady=10, padx=10, fill='x')

        # סוג הבעיה
        self.problem_type = tk.StringVar(value="רגרסיה")
        problem_types = ["רגרסיה", "סיווג"]
        for prob_type in problem_types:
            rb = tk.Radiobutton(model_frame, text=prob_type, 
                                 variable=self.problem_type, 
                                 value=prob_type)
            rb.pack(side=tk.LEFT)

        # בחירת מודל
        self.model_var = tk.StringVar()
        self.model_dropdown = ttk.Combobox(model_frame, textvariable=self.model_var)
        self.model_dropdown.pack(side=tk.LEFT, padx=10)

        # עדכון מודלים לפי סוג הבעיה
        self.problem_type.trace('w', self._update_models)

        # כפתור אימון מודל
        train_btn = tk.Button(model_frame, text="אמן מודל", command=self._train_model)
        train_btn.pack(side=tk.LEFT)

    def _load_data(self):
        filepath = filedialog.askopenfilename(filetypes=[("CSV files", "*.csv")])
        if filepath:
            try:
                self.original_data = pd.read_csv(filepath)
                
                # עדכון רשימות עמודות
                self.numeric_columns.delete(0, tk.END)
                self.categorical_columns.delete(0, tk.END)
                
                for col in self.original_data.columns:
                    if self.original_data[col].dtype in ['int64', 'float64']:
                        self.numeric_columns.insert(tk.END, col)
                    else:
                        self.categorical_columns.insert(tk.END, col)
                
                messagebox.showinfo("הודעה", "נתונים נטענו בהצלחה")
            
            except Exception as e:
                messagebox.showerror("שגיאה", str(e))

    def _preprocess_data(self):
        # בחירת עמודות נומריות וקטגוריאליות
        numeric_cols = [self.numeric_columns.get(i) for i in self.numeric_columns.curselection()]
        categorical_cols = [self.categorical_columns.get(i) for i in self.categorical_columns.curselection()]

        # יצירת preprocessor
        preprocessor = ColumnTransformer(
            transformers=[
                ('num', Pipeline([
                    ('imputer', SimpleImputer(strategy='median')),
                    ('scaler', StandardScaler())
                ]), numeric_cols),
                ('cat', Pipeline([
                    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),
                    ('onehot', OneHotEncoder(handle_unknown='ignore'))
                ]), categorical_cols)
            ])

        # שמירת preprocessor
        self.preprocessor = preprocessor

    def _update_models(self, *args):
        problem_type = self.problem_type.get()
        models = list(self.ml_models[problem_type].keys())
        self.model_dropdown['values'] = models

    def _train_model(self):
        # בחירת מודל
        problem_type = self.problem_type.get()
        model_name = self.model_var.get()
        model = self.ml_models[problem_type][model_name]

        # חלוקת נתונים
        X = self.original_data.drop(columns=['target'])  # להחליף ב-column המטרה שלך
        y = self.original_data['target']  # להחליף ב-column המטרה שלך

        # חלוקה לסט אימון וטסט
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

        # יצירת צינור למידה מלא
        pipeline = Pipeline([
            ('preprocessor', self.preprocessor),
            ('model', model)
        ])

        # חיפוש היפר-פרמטרים
        param_grid = self.hyperparameters.get(model_name.split()[0], {})
        grid_search = GridSearchCV(pipeline, param_grid, cv=5)
        grid_search.fit(X_train, y_train)

        # הערכת המודל
        best_model = grid_search.best_estimator_
        y_pred = best_model.predict(X_test)

        # הצגת תוצאות
        if problem_type == 'רגרסיה':
            mse = mean_squared_error(y_test, y_pred)
            r2 = r2_score(y_test, y_pred)
            print(f"MSE: {mse}, R2: {r2}")
        else:
            print(classification_report(y_test, y_pred))

def main():
    root = tk.Tk()
    app = AdvancedMLAnalyzer(root)
    root.mainloop()

if __name__ == "__main__":
    main()
